---

- name: check that group {{ cassandra_cluster_group_name }} is not empty
  fail: msg="Your {{'{{'}} cassandra_cluster_group_name {{ '}}' }} is set to '{{ cassandra_cluster_group_name }}' and has {{ groups[cassandra_cluster_group_name]|count }} hosts, at least 1 is required"
  when: groups[cassandra_cluster_group_name]|count < 1

- name: check if cassandra already installed
  stat: path={{ cassandra_path_install }}/cassandra
  register: link

- name: find out version of the latest release
  shell: curl -s http://cassandra.apache.org/|grep "{{ 'Latest' if cassandra_version == "latest" else 'Stable' }} release" |sed -E 's/\s+{{ 'Latest' if cassandra_version == 'latest' else 'Stable' }}\srelease\s<b>([0-9.]+)<\/b>.*/\1/'
  register: result
  when: cassandra_version in ["latest", "stable"]
  tags: always

- name: get checksum
  uri: url=http://www.apache.org/dist/cassandra/{{ result.stdout }}/apache-cassandra-{{ result.stdout }}-bin.tar.gz.sha1 return_content=yes
  register: checksum
  when: cassandra_version in ["latest", "stable"]
  tags: always

- name: define cassandra version if it is set to latest, also set checksum
  set_fact:
      cassandra_version: "{{ result.stdout }}"
      cassandra_version_sha1: "{{ checksum.content }}"
  when: cassandra_version in ["latest", "stable"]
  tags: always

- include: install.yml
  when: not link.stat.exists or cassandra_force_upgrade

- name: upload configs and scripts
  template: src="{{ item.name }}" dest="{{ item.dest if item.dest is defined else cassandra_path_install + '/' + item.name }}" owner="{{ item.user if item.user is defined else 'root' }}" group="{{ item.group if item.group is defined else 'root' }}" mode="{{ item.mode if item.mode is defined else '0644' }}"
  with_items:
    - { name: "cassandra/conf/cassandra.yaml", mode: "0640", user: "{{ cassandra_user }}" }
    - { name: "cassandra/conf/logback.xml", mode: "0440", user: "{{ cassandra_user }}" }
    - { name: "cassandra/conf/cassandra-topology.properties", mode: "0440", user: "{{ cassandra_user }}" }
    - { name: "cassandra-autoconfig", mode: "0755", dst: "{{ cassandra_path_install }}/{{ cassandra_start }}" }
  when: "ansible_os_family != 'Elbrus'"

- name: upload configs and scripts
  template: src="{{ item.name }}" dest="{{ item.dest if item.dest is defined else cassandra_path_install + '/' + item.name }}" owner="{{ item.user if item.user is defined else 'root' }}" group="{{ item.group if item.group is defined else 'root' }}"
  with_items:
    - { name: "cassandra/conf/cassandra.yaml", user: "{{ cassandra_user }}" }
    - { name: "cassandra/conf/logback.xml", user: "{{ cassandra_user }}" }
    - { name: "cassandra/conf/cassandra-topology.properties", user: "{{ cassandra_user }}" }
    - { name: "cassandra-autoconfig", dst: "{{ cassandra_path_install }}/{{ cassandra_start }}" }
  when: "ansible_os_family == 'Elbrus'"
  
- name: upload configs and scripts
  shell: chmod 0755 "{{ item.dest if item.dest is defined else cassandra_path_install + '/' + item.name }}"
  with_items:
    - { name: "cassandra-autoconfig", dst: "{{ cassandra_path_install }}/{{ cassandra_start }}" }
  when: "ansible_os_family == 'Elbrus'"

- name: put a systemctl unit file
  template: src=cassandra.service dest=/etc/systemd/system/cassandra.service
  when: "(not cassandra_runit_enabled) and ((ansible_distribution == 'Debian' and ansible_distribution_major_version == '8') or (ansible_distribution == 'Ubuntu' and (ansible_distribution_version|version_compare(14.04, '>'))) or (ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'))"

- name: enable and start cassandra service
  service: name="cassandra" enabled=yes state=started
  when: "(not cassandra_runit_enabled) and ((ansible_distribution == 'Debian' and ansible_distribution_major_version == '8') or (ansible_distribution == 'Ubuntu' and (ansible_distribution_version|version_compare(14.04, '>'))) or (ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'))"

- name: wait for port availability
  wait_for: host={{ hostvars[inventory_hostname]['ansible_' + cassandra_node_iface_ext]['ipv4']['address'] }} port=9042 delay=5 timeout=60
  register: check
  ignore_errors: yes

- name: print check status
  debug: var=check

- name: fail if conection failed
  fail: >
        msg="Connection failed to {{ hostvars[inventory_hostname]['ansible_' + cassandra_node_iface_ext]['ipv4']['address'] }}:9043. Please
        check '/var/log/cassandra/current' log file and try to run
        '{{ cassandra_path_install }}/cassandra/bin/cqlsh
        {{ hostvars[inventory_hostname]['ansible_' + cassandra_node_iface_ext]['ipv4']['address'] }}'"
  when: check.failed is defined and check.failed

- name: create /usr/share/datastax-agent/bin
  file: dest=/usr/share/datastax-agent/bin group=cassandra owner=cassandra state=directory
  
- name: put stop-start for datastax
  template: dest=/usr/share/datastax-agent/bin/{{ item }} src=datastax-agent/{{ item }} group=cassandra owner=cassandra mode=755
  with_items:
      - start-cassandra
      - stop-cassandra

